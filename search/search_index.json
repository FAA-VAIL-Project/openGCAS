{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"openGCAS - Ground Collision Avoidance System","text":""},{"location":"index.html#1-introduction","title":"1. Introduction","text":""},{"location":"LICENSE.html","title":"openGCAS - License","text":"<pre><code>              GNU LESSER GENERAL PUBLIC LICENSE\n                   Version 2.1, February 1999\n</code></pre> <p>Copyright (C) 1991, 1999 Free Software Foundation, Inc. 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed.</p> <p>[This is the first released version of the Lesser GPL.  It also counts as the successor of the GNU Library Public License, version 2, hence the version number 2.1.]</p> <pre><code>                        Preamble\n</code></pre> <p>The licenses for most software are designed to take away your freedom to share and change it.  By contrast, the GNU General Public Licenses are intended to guarantee your freedom to share and change free software--to make sure the software is free for all its users.</p> <p>This license, the Lesser General Public License, applies to some specially designated software packages--typically libraries--of the Free Software Foundation and other authors who decide to use it.  You can use it too, but we suggest you first think carefully about whether this license or the ordinary General Public License is the better strategy to use in any particular case, based on the explanations below.</p> <p>When we speak of free software, we are referring to freedom of use, not price.  Our General Public Licenses are designed to make sure that you have the freedom to distribute copies of free software (and charge for this service if you wish); that you receive source code or can get it if you want it; that you can change the software and use pieces of it in new free programs; and that you are informed that you can do these things.</p> <p>To protect your rights, we need to make restrictions that forbid distributors to deny you these rights or to ask you to surrender these rights.  These restrictions translate to certain responsibilities for you if you distribute copies of the library or if you modify it.</p> <p>For example, if you distribute copies of the library, whether gratis or for a fee, you must give the recipients all the rights that we gave you.  You must make sure that they, too, receive or can get the source code.  If you link other code with the library, you must provide complete object files to the recipients, so that they can relink them with the library after making changes to the library and recompiling it.  And you must show them these terms so they know their rights.</p> <p>We protect your rights with a two-step method: (1) we copyright the library, and (2) we offer you this license, which gives you legal permission to copy, distribute and/or modify the library.</p> <p>To protect each distributor, we want to make it very clear that there is no warranty for the free library.  Also, if the library is modified by someone else and passed on, the recipients should know that what they have is not the original version, so that the original author's reputation will not be affected by problems that might be introduced by others.</p> <p>Finally, software patents pose a constant threat to the existence of any free program.  We wish to make sure that a company cannot effectively restrict the users of a free program by obtaining a restrictive license from a patent holder.  Therefore, we insist that any patent license obtained for a version of the library must be consistent with the full freedom of use specified in this license.</p> <p>Most GNU software, including some libraries, is covered by the ordinary GNU General Public License.  This license, the GNU Lesser General Public License, applies to certain designated libraries, and is quite different from the ordinary General Public License.  We use this license for certain libraries in order to permit linking those libraries into non-free programs.</p> <p>When a program is linked with a library, whether statically or using a shared library, the combination of the two is legally speaking a combined work, a derivative of the original library.  The ordinary General Public License therefore permits such linking only if the entire combination fits its criteria of freedom.  The Lesser General Public License permits more lax criteria for linking other code with the library.</p> <p>We call this license the \"Lesser\" General Public License because it does Less to protect the user's freedom than the ordinary General Public License.  It also provides other free software developers Less of an advantage over competing non-free programs.  These disadvantages are the reason we use the ordinary General Public License for many libraries.  However, the Lesser license provides advantages in certain special circumstances.</p> <p>For example, on rare occasions, there may be a special need to encourage the widest possible use of a certain library, so that it becomes a de-facto standard.  To achieve this, non-free programs must be allowed to use the library.  A more frequent case is that a free library does the same job as widely used non-free libraries.  In this case, there is little to gain by limiting the free library to free software only, so we use the Lesser General Public License.</p> <p>In other cases, permission to use a particular library in non-free programs enables a greater number of people to use a large body of free software.  For example, permission to use the GNU C Library in non-free programs enables many more people to use the whole GNU operating system, as well as its variant, the GNU/Linux operating system.</p> <p>Although the Lesser General Public License is Less protective of the users' freedom, it does ensure that the user of a program that is linked with the Library has the freedom and the wherewithal to run that program using a modified version of the Library.</p> <p>The precise terms and conditions for copying, distribution and modification follow.  Pay close attention to the difference between a \"work based on the library\" and a \"work that uses the library\".  The former contains code derived from the library, whereas the latter must be combined with the library in order to run.</p> <pre><code>              GNU LESSER GENERAL PUBLIC LICENSE\n</code></pre> <p>TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION</p> <ol> <li>This License Agreement applies to any software library or other    program which contains a notice placed by the copyright holder or    other authorized party saying it may be distributed under the terms of    this Lesser General Public License (also called \"this License\").    Each licensee is addressed as \"you\".</li> </ol> <p>A \"library\" means a collection of software functions and/or data prepared so as to be conveniently linked with application programs (which use some of those functions and data) to form executables.</p> <p>The \"Library\", below, refers to any such software library or work which has been distributed under these terms.  A \"work based on the Library\" means either the Library or any derivative work under copyright law: that is to say, a work containing the Library or a portion of it, either verbatim or with modifications and/or translated straightforwardly into another language.  (Hereinafter, translation is included without limitation in the term \"modification\".)</p> <p>\"Source code\" for a work means the preferred form of the work for making modifications to it.  For a library, complete source code means all the source code for all modules it contains, plus any associated interface definition files, plus the scripts used to control compilation and installation of the library.</p> <p>Activities other than copying, distribution and modification are not covered by this License; they are outside its scope.  The act of running a program using the Library is not restricted, and output from such a program is covered only if its contents constitute a work based on the Library (independent of the use of the Library in a tool for writing it).  Whether that is true depends on what the Library does and what the program that uses the Library does.</p> <ol> <li>You may copy and distribute verbatim copies of the Library's    complete source code as you receive it, in any medium, provided that    you conspicuously and appropriately publish on each copy an    appropriate copyright notice and disclaimer of warranty; keep intact    all the notices that refer to this License and to the absence of any    warranty; and distribute a copy of this License along with the    Library.</li> </ol> <p>You may charge a fee for the physical act of transferring a copy, and you may at your option offer warranty protection in exchange for a fee.</p> <ol> <li> <p>You may modify your copy or copies of the Library or any portion    of it, thus forming a work based on the Library, and copy and    distribute such modifications or work under the terms of Section 1    above, provided that you also meet all of these conditions:</p> <p>a) The modified work must itself be a software library.</p> <p>b) You must cause the files modified to carry prominent notices stating that you changed the files and the date of any change.</p> <p>c) You must cause the whole of the work to be licensed at no charge to all third parties under the terms of this License.</p> <p>d) If a facility in the modified Library refers to a function or a table of data to be supplied by an application program that uses the facility, other than as an argument passed when the facility is invoked, then you must make a good faith effort to ensure that, in the event an application does not supply such function or table, the facility still operates, and performs whatever part of its purpose remains meaningful.</p> <p>(For example, a function in a library to compute square roots has a purpose that is entirely well-defined independent of the application.  Therefore, Subsection 2d requires that any application-supplied function or table used by this function must be optional: if the application does not supply it, the square root function must still compute square roots.)</p> </li> </ol> <p>These requirements apply to the modified work as a whole.  If identifiable sections of that work are not derived from the Library, and can be reasonably considered independent and separate works in themselves, then this License, and its terms, do not apply to those sections when you distribute them as separate works.  But when you distribute the same sections as part of a whole which is a work based on the Library, the distribution of the whole must be on the terms of this License, whose permissions for other licensees extend to the entire whole, and thus to each and every part regardless of who wrote it.</p> <p>Thus, it is not the intent of this section to claim rights or contest your rights to work written entirely by you; rather, the intent is to exercise the right to control the distribution of derivative or collective works based on the Library.</p> <p>In addition, mere aggregation of another work not based on the Library with the Library (or with a work based on the Library) on a volume of a storage or distribution medium does not bring the other work under the scope of this License.</p> <ol> <li>You may opt to apply the terms of the ordinary GNU General Public    License instead of this License to a given copy of the Library.  To do    this, you must alter all the notices that refer to this License, so    that they refer to the ordinary GNU General Public License, version 2,    instead of to this License.  (If a newer version than version 2 of the    ordinary GNU General Public License has appeared, then you can specify    that version instead if you wish.)  Do not make any other change in    these notices.</li> </ol> <p>Once this change is made in a given copy, it is irreversible for that copy, so the ordinary GNU General Public License applies to all subsequent copies and derivative works made from that copy.</p> <p>This option is useful when you wish to copy part of the code of the Library into a program that is not a library.</p> <ol> <li>You may copy and distribute the Library (or a portion or    derivative of it, under Section 2) in object code or executable form    under the terms of Sections 1 and 2 above provided that you accompany    it with the complete corresponding machine-readable source code, which    must be distributed under the terms of Sections 1 and 2 above on a    medium customarily used for software interchange.</li> </ol> <p>If distribution of object code is made by offering access to copy from a designated place, then offering equivalent access to copy the source code from the same place satisfies the requirement to distribute the source code, even though third parties are not compelled to copy the source along with the object code.</p> <ol> <li>A program that contains no derivative of any portion of the    Library, but is designed to work with the Library by being compiled or    linked with it, is called a \"work that uses the Library\".  Such a    work, in isolation, is not a derivative work of the Library, and    therefore falls outside the scope of this License.</li> </ol> <p>However, linking a \"work that uses the Library\" with the Library creates an executable that is a derivative of the Library (because it contains portions of the Library), rather than a \"work that uses the library\".  The executable is therefore covered by this License. Section 6 states terms for distribution of such executables.</p> <p>When a \"work that uses the Library\" uses material from a header file that is part of the Library, the object code for the work may be a derivative work of the Library even though the source code is not. Whether this is true is especially significant if the work can be linked without the Library, or if the work is itself a library.  The threshold for this to be true is not precisely defined by law.</p> <p>If such an object file uses only numerical parameters, data structure layouts and accessors, and small macros and small inline functions (ten lines or less in length), then the use of the object file is unrestricted, regardless of whether it is legally a derivative work.  (Executables containing this object code plus portions of the Library will still fall under Section 6.)</p> <p>Otherwise, if the work is a derivative of the Library, you may distribute the object code for the work under the terms of Section 6. Any executables containing that work also fall under Section 6, whether or not they are linked directly with the Library itself.</p> <ol> <li>As an exception to the Sections above, you may also combine or    link a \"work that uses the Library\" with the Library to produce a    work containing portions of the Library, and distribute that work    under terms of your choice, provided that the terms permit    modification of the work for the customer's own use and reverse    engineering for debugging such modifications.</li> </ol> <p>You must give prominent notice with each copy of the work that the Library is used in it and that the Library and its use are covered by this License.  You must supply a copy of this License.  If the work during execution displays copyright notices, you must include the copyright notice for the Library among them, as well as a reference directing the user to the copy of this License.  Also, you must do one of these things:</p> <pre><code>a) Accompany the work with the complete corresponding\nmachine-readable source code for the Library including whatever\nchanges were used in the work (which must be distributed under\nSections 1 and 2 above); and, if the work is an executable linked\nwith the Library, with the complete machine-readable \"work that\nuses the Library\", as object code and/or source code, so that the\nuser can modify the Library and then relink to produce a modified\nexecutable containing the modified Library.  (It is understood\nthat the user who changes the contents of definitions files in the\nLibrary will not necessarily be able to recompile the application\nto use the modified definitions.)\n\nb) Use a suitable shared library mechanism for linking with the\nLibrary.  A suitable mechanism is one that (1) uses at run time a\ncopy of the library already present on the user's computer system,\nrather than copying library functions into the executable, and (2)\nwill operate properly with a modified version of the library, if\nthe user installs one, as long as the modified version is\ninterface-compatible with the version that the work was made with.\n\nc) Accompany the work with a written offer, valid for at\nleast three years, to give the same user the materials\nspecified in Subsection 6a, above, for a charge no more\nthan the cost of performing this distribution.\n\nd) If distribution of the work is made by offering access to copy\nfrom a designated place, offer equivalent access to copy the above\nspecified materials from the same place.\n\ne) Verify that the user has already received a copy of these\nmaterials or that you have already sent this user a copy.\n</code></pre> <p>For an executable, the required form of the \"work that uses the Library\" must include any data and utility programs needed for reproducing the executable from it.  However, as a special exception, the materials to be distributed need not include anything that is normally distributed (in either source or binary form) with the major components (compiler, kernel, and so on) of the operating system on which the executable runs, unless that component itself accompanies the executable.</p> <p>It may happen that this requirement contradicts the license restrictions of other proprietary libraries that do not normally accompany the operating system.  Such a contradiction means you cannot use both them and the Library together in an executable that you distribute.</p> <ol> <li> <p>You may place library facilities that are a work based on the    Library side-by-side in a single library together with other library    facilities not covered by this License, and distribute such a combined    library, provided that the separate distribution of the work based on    the Library and of the other library facilities is otherwise    permitted, and provided that you do these two things:</p> <p>a) Accompany the combined library with a copy of the same work based on the Library, uncombined with any other library facilities.  This must be distributed under the terms of the Sections above.</p> <p>b) Give prominent notice with the combined library of the fact that part of it is a work based on the Library, and explaining where to find the accompanying uncombined form of the same work.</p> </li> <li> <p>You may not copy, modify, sublicense, link with, or distribute    the Library except as expressly provided under this License.  Any    attempt otherwise to copy, modify, sublicense, link with, or    distribute the Library is void, and will automatically terminate your    rights under this License.  However, parties who have received copies,    or rights, from you under this License will not have their licenses    terminated so long as such parties remain in full compliance.</p> </li> <li> <p>You are not required to accept this License, since you have not    signed it.  However, nothing else grants you permission to modify or    distribute the Library or its derivative works.  These actions are    prohibited by law if you do not accept this License.  Therefore, by    modifying or distributing the Library (or any work based on the    Library), you indicate your acceptance of this License to do so, and    all its terms and conditions for copying, distributing or modifying    the Library or works based on it.</p> </li> <li> <p>Each time you redistribute the Library (or any work based on the     Library), the recipient automatically receives a license from the     original licensor to copy, distribute, link with or modify the Library     subject to these terms and conditions.  You may not impose any further     restrictions on the recipients' exercise of the rights granted herein.     You are not responsible for enforcing compliance by third parties with     this License.</p> </li> <li> <p>If, as a consequence of a court judgment or allegation of patent     infringement or for any other reason (not limited to patent issues),     conditions are imposed on you (whether by court order, agreement or     otherwise) that contradict the conditions of this License, they do not     excuse you from the conditions of this License.  If you cannot     distribute so as to satisfy simultaneously your obligations under this     License and any other pertinent obligations, then as a consequence you     may not distribute the Library at all.  For example, if a patent     license would not permit royalty-free redistribution of the Library by     all those who receive copies directly or indirectly through you, then     the only way you could satisfy both it and this License would be to     refrain entirely from distribution of the Library.</p> </li> </ol> <p>If any portion of this section is held invalid or unenforceable under any particular circumstance, the balance of the section is intended to apply, and the section as a whole is intended to apply in other circumstances.</p> <p>It is not the purpose of this section to induce you to infringe any patents or other property right claims or to contest validity of any such claims; this section has the sole purpose of protecting the integrity of the free software distribution system which is implemented by public license practices.  Many people have made generous contributions to the wide range of software distributed through that system in reliance on consistent application of that system; it is up to the author/donor to decide if he or she is willing to distribute software through any other system and a licensee cannot impose that choice.</p> <p>This section is intended to make thoroughly clear what is believed to be a consequence of the rest of this License.</p> <ol> <li> <p>If the distribution and/or use of the Library is restricted in     certain countries either by patents or by copyrighted interfaces, the     original copyright holder who places the Library under this License may add     an explicit geographical distribution limitation excluding those countries,     so that distribution is permitted only in or among countries not thus     excluded.  In such case, this License incorporates the limitation as if     written in the body of this License.</p> </li> <li> <p>The Free Software Foundation may publish revised and/or new     versions of the Lesser General Public License from time to time.     Such new versions will be similar in spirit to the present version,     but may differ in detail to address new problems or concerns.</p> </li> </ol> <p>Each version is given a distinguishing version number.  If the Library specifies a version number of this License which applies to it and \"any later version\", you have the option of following the terms and conditions either of that version or of any later version published by the Free Software Foundation.  If the Library does not specify a license version number, you may choose any version ever published by the Free Software Foundation.</p> <ol> <li> <p>If you wish to incorporate parts of the Library into other free     programs whose distribution conditions are incompatible with these,     write to the author to ask for permission.  For software which is     copyrighted by the Free Software Foundation, write to the Free     Software Foundation; we sometimes make exceptions for this.  Our     decision will be guided by the two goals of preserving the free status     of all derivatives of our free software and of promoting the sharing     and reuse of software generally.</p> <pre><code>                  NO WARRANTY\n</code></pre> </li> <li> <p>BECAUSE THE LIBRARY IS LICENSED FREE OF CHARGE, THERE IS NO     WARRANTY FOR THE LIBRARY, TO THE EXTENT PERMITTED BY APPLICABLE LAW.     EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR     OTHER PARTIES PROVIDE THE LIBRARY \"AS IS\" WITHOUT WARRANTY OF ANY     KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE     IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR     PURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE     LIBRARY IS WITH YOU.  SHOULD THE LIBRARY PROVE DEFECTIVE, YOU ASSUME     THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.</p> </li> <li> <p>IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN     WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY     AND/OR REDISTRIBUTE THE LIBRARY AS PERMITTED ABOVE, BE LIABLE TO YOU     FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR     CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE     LIBRARY (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING     RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A     FAILURE OF THE LIBRARY TO OPERATE WITH ANY OTHER SOFTWARE), EVEN IF     SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH     DAMAGES.</p> <pre><code>           END OF TERMS AND CONDITIONS\n\n How to Apply These Terms to Your New Libraries\n</code></pre> </li> </ol> <p>If you develop a new library, and you want it to be of the greatest possible use to the public, we recommend making it free software that everyone can redistribute and change.  You can do so by permitting redistribution under these terms (or, alternatively, under the terms of the ordinary General Public License).</p> <p>To apply these terms, attach the following notices to the library.  It is safest to attach them to the start of each source file to most effectively convey the exclusion of warranty; and each file should have at least the \"copyright\" line and a pointer to where the full notice is found.</p> <pre><code>&lt;one line to give the library's name and a brief idea of what it does.&gt;\nCopyright (C) &lt;year&gt;  &lt;name of author&gt;\n\nThis library is free software; you can redistribute it and/or\nmodify it under the terms of the GNU Lesser General Public\nLicense as published by the Free Software Foundation; either\nversion 2.1 of the License, or (at your option) any later version.\n\nThis library is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\nLesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public\nLicense along with this library; if not, write to the Free Software\nFoundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301\nUSA\n</code></pre> <p>Also add information on how to contact you by electronic and paper mail.</p> <p>You should also get your employer (if you work as a programmer) or your school, if any, to sign a \"copyright disclaimer\" for the library, if necessary.  Here is a sample; alter the names:</p> <p>Yoyodyne, Inc., hereby disclaims all copyright interest in the library `Frob' (a library for tweaking knobs) written by James Random Hacker.</p> <p>, 1 April 1990 Ty Coon, President of Vice <p>That's all there is to it!</p>"},{"location":"code_of_conduct.html","title":"openGCAS - Code of Conduct","text":""},{"location":"code_of_conduct.html#our-pledge","title":"Our Pledge","text":"<p>We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.</p> <p>We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.</p>"},{"location":"code_of_conduct.html#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to a positive environment for our community include:</p> <ul> <li>Demonstrating empathy and kindness toward other people</li> <li>Being respectful of differing opinions, viewpoints, and experiences</li> <li>Giving and gracefully accepting constructive feedback</li> <li>Accepting responsibility and apologizing to those affected by our mistakes,   and learning from the experience</li> <li>Focusing on what is best not just for us as individuals, but for the   overall community</li> </ul> <p>Examples of unacceptable behavior include:</p> <ul> <li>The use of sexualized language or imagery, and sexual attention or   advances of any kind</li> <li>Trolling, insulting or derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or email   address, without their explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a   professional setting</li> </ul>"},{"location":"code_of_conduct.html#enforcement-responsibilities","title":"Enforcement Responsibilities","text":"<p>Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful.</p> <p>Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.</p>"},{"location":"code_of_conduct.html#scope","title":"Scope","text":"<p>This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event.</p>"},{"location":"code_of_conduct.html#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at . All complaints will be reviewed and investigated promptly and fairly.</p> <p>All community leaders are obligated to respect the privacy and security of the reporter of any incident.</p>"},{"location":"code_of_conduct.html#enforcement-guidelines","title":"Enforcement Guidelines","text":"<p>Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:</p>"},{"location":"code_of_conduct.html#1-correction","title":"1. Correction","text":"<p>Community Impact: Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community.</p> <p>Consequence: A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.</p>"},{"location":"code_of_conduct.html#2-warning","title":"2. Warning","text":"<p>Community Impact: A violation through a single incident or series of actions.</p> <p>Consequence: A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.</p>"},{"location":"code_of_conduct.html#3-temporary-ban","title":"3. Temporary Ban","text":"<p>Community Impact: A serious violation of community standards, including sustained inappropriate behavior.</p> <p>Consequence: A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.</p>"},{"location":"code_of_conduct.html#4-permanent-ban","title":"4. Permanent Ban","text":"<p>Community Impact: Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior,  harassment of an individual, or aggression toward or disparagement of classes of individuals.</p> <p>Consequence: A permanent ban from any sort of public interaction within the community.</p>"},{"location":"code_of_conduct.html#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 2.0, available at https://www.contributor-covenant.org/version/2/0/code_of_conduct.html.</p> <p>Community Impact Guidelines were inspired by Mozilla's code of conduct enforcement ladder.</p> <p>For answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq. Translations are available at https://www.contributor-covenant.org/translations.</p>"},{"location":"contributing.html","title":"openGCAS - Contributing Guide","text":"<p>We want to make contributing to this project as easy and transparent as possible, whether it's:</p> <ul> <li>Reporting a bug</li> <li>Discussing the current state of the code</li> <li>Submitting a fix</li> <li>Proposing new features</li> <li>Becoming a maintainer</li> </ul>"},{"location":"contributing.html#developing-with-github","title":"Developing with GitHub","text":"<p>We use GitHub to host code, to track issues and feature requests, as well as accept pull requests. All code changes happen through pull requests which are the best way to propose changes to the codebase.  We actively welcome your pull requests:</p> <ol> <li>Fork the repo and create your branch from <code>master</code>.</li> <li>If you've added code that should be tested, add tests.</li> <li>If you've changed APIs, update the documentation.</li> <li>Ensure the test suite passes.</li> <li>Make sure your code lints.</li> <li>Issue your pull request!</li> </ol>"},{"location":"contributing.html#contributions-and-software-license","title":"Contributions and Software License","text":"<p>In short, when you submit code changes, your submissions are understood to be under the same Software License that covers this repository.  Feel free to contact the maintainers if that's a concern.</p>"},{"location":"contributing.html#report-bugs-using-githubs-issues","title":"Report bugs using Github's issues","text":"<p>We use GitHub issues to track public bugs. Report a bug by opening a new issue; it's that easy!</p>"},{"location":"contributing.html#write-thorough-bug-reports","title":"Write thorough bug reports","text":"<p>Great Bug Reports tend to have:</p> <ul> <li>A quick summary and/or background</li> <li>Steps to reproduce<ul> <li>Be specific!</li> <li>Give sample code if you can.</li> </ul> </li> <li>What you expected would happen</li> <li>What actually happens</li> <li>Notes (possibly including why you think this might be happening, or stuff you tried that didn't work)</li> </ul>"},{"location":"contributing.html#software-development-standards","title":"Software Development Standards","text":"<p>Any change must comply with our Software Development Standards</p>"},{"location":"contributing.html#license","title":"License","text":"<p>By contributing, you agree that your contributions will be licensed under our Software License.</p>"},{"location":"data_access.html","title":"Data Access Architecture","text":"<p>Dealing with multiple raster files at once presents many opportunities for unsafe and messy code. openGCAS attempts to deal with this by establishing four levels of data access and designating areas of memory where data can be safely queried at any point during runtime.</p> <ul> <li>Level 0 \"Raster Query System (RQS)\"</li> <li>Lowest level interface between datafiles and application</li> <li><code>RasterQuery</code> class<ul> <li>Processing <code>data/</code> root directory</li> <li>Converting lat-long <code>llPoint</code> to <code>nPoint</code> on raster</li> <li>Handles errant lat-long values safely</li> <li>Allocating memory to load nine rasters on the heap <code>m_rasterCallOrder</code></li> </ul> </li> <li>Level 1 \"Map Manager\"</li> <li>Querying data from RQS</li> <li>Filling RQS memory with altitude data</li> <li>Preparing to update <code>m_rasterCallOrder</code></li> <li>Create small stack array with interpolated altitudes for quick access</li> <li></li> </ul>"},{"location":"gcas_details.html","title":"GCAS details","text":""},{"location":"gcas_details.html#trajectory-prediction-algorithm-tpa","title":"Trajectory Prediction Algorithm (TPA)","text":"<p>The Trajectory Prediction Algorithm (TPA) constantly calculates one or more escape manuevers given the current aircraft state.  For openGCAS, three trajectories are calculated.  The first is a wings level pull up (a vertical manuever), the second and third are turning climbs in the each direction.  For aircraft with typically low climb performance, the turning manuevers are oftentimes preferred when vertical terrain or obstacles threaten the aircraft flight path. In this case, turn performance often exceeds climb performance. For situations without vertical terrain, such as when the aircraft is descending onto a relatively flat area, the vertical trajectory is preferred. The reason for this is two fold. First the vertical trajectory is better at vertically separating from flat terrain, and second, the manuever is a more natural and easily flown avoidance manuever.</p> <p> Side view of a wings level pull-up trajectory prediction (dashed line) note that its different than projecting out the current state (solid line)</p> <p>The main development effort required to produce the various TPA is to be able to model the actual dynamics of the airplane in various conditions.  This generally begins with producing a series of simulation runs, or flight test runs, of the aircraft flying the desired escape manuever.  For an automatic system, the GCAS autopilot should be used should be used to fly the manuevers, or for a manual system, the pilot should fly them.  The flight or simulation data produced from these runs should then be modeled with an accuracy required to support the nuisance and protection requirements of the system.  Verification of this model is critical to verification of the total system, so the data should be separated into two categories, learning data and verification data. If the model is overfitted to the learning data, then the verification data will show that.</p> <p>In actuality, the TPA consists of a series of discritized points providing latitude, longitude, altitude, and how certain the algorithm is of this predicted location.  Each of these points are calculated with knowledge of the following variables starting at the current aircraft state.</p>"},{"location":"gcas_details.html#tpa-variables","title":"TPA variables","text":"<ul> <li>latitude (decimal degrees)</li> <li>longitide (decimal degrees)</li> <li>gps_altitude (ft)</li> <li>bank_angle (deg)</li> <li>vertical_velocity_up (ft/sec)</li> <li>ktas (knots)</li> <li>kias (knots)</li> <li>Heading_true (deg)</li> <li>wind_direction (deg)</li> <li>wind_speed (ft/sec)</li> <li>z_accelertion (g's)</li> <li>gross_weight (lbs)</li> <li>density_altitude (ft)</li> <li>winds_down (ft/sec)</li> </ul> <p> Top down view of the 3 TPA manuevers and a depiction of the points that make them up</p>"},{"location":"gcas_details.html#map-manager","title":"Map Manager","text":"<p>Once the trajectory prediction has been computed, it has to be compared with the location of the ground/terrain to understand whether there is a risk of ground collision.  Over the years, the mechanisms to determine where the ground was in relation to the aircraft have changed.  Early systems used active sensors, such as downward looking lidar or forward looking radar, to sense the relative position of the ground.  For these systems, simple calculations were used to determine predicted ground proximity. However, there were several disadvantages to this approach. For GCAS, a more robust and complete model of the elevation of the ground is required.  Luckily over the past several decades, large accurate terrain elevation databases have been created which provide this information.  Some important examples of these databases are: - the NASA Shuttle Radar Topography Mission (SRTM) worldwide terrain database or  - the US Digital Terrain Elevation Database (DTED) or  - the new (and highly accurate) TerraSAR-X add-on for Digital Elevation Measurement (TanDEM-X) database</p> <p>Each of these data sources have advantages and disadvantages but are also a dramatic improvement over the active sensor approach. However, because the databases cover a large portion of the land area of the earth, we need to build mechanisms that can efficiently query them.</p> <p> Shaded relief image of the TanDEM-X data.  The databases show the shape and elevation of terrain around the world</p> <p>The first step in querying the terrain database is to identify which points on the ground are relevant.  Luckily, the TPA contains a list of these points that we can directly feed into the map manager.  The map manager's job is then to return the elevation at these points.  However, since we don't know exactly where we are and can't predict with 100% certainty where we will be, we should scan the areas immediately around the TPA points as well.  The TPA calculates a horizontal uncertainty for just this purpose which is also fed into the map manager.  The map manager then returns the highest terrain elevation point in each of the areas defined by the TPA points plus uncertainty.  Once each of the TPA points has a corresponding terrain elevation provided by the Map Manager, the algorithm can determine whether a terrain avoidance manuever is warranted.</p> <p> The Map Manager provides the highest terrain elevation in a specified area.  The areas are circles, centered at TPA points with radii provided by the horizontal uncertainty.</p>"},{"location":"gcas_details.html#determining-need-to-avoid","title":"Determining need to avoid","text":"<p>So, now the algorithm has a predicted trajectory and the terrain elevations underlying the TPA.  However, in order for the system to make sure that the airplane doesn't collide with terrain during the avoidance manuever there must be a buffer added in.  The height of the buffer, called the Terrain Clearance Buffer (TCB) should be dependant on the following: - state uncertainty (such as GPS uncertainty) - TPA uncertainty (how well the TPA has been shown to model the actual recovery) - Terrain data uncertainty (how well the terrain databases model the actual terrain elevation) - Timing uncertainty (how much altitude will be lost as the Monitor processes GCAS algorithm and communicates with the Controller)</p> <p>Luckily, even with all of these inclusions, the TCB is only a couple of hundred feet.  This is usually acceptable because most pilots would not fly so close to the ground and missing the ground by a hundred feet or so would be fine by them.</p> <p></p> <p>So, if the system senses that the TPA falls below the terrain elevation + TCB, the system will determine that the an avoidance manuever should be flown.  However, because of the order of priority of the requirements, GCAS will first do a check of all it's systems to make sure there are no errors before sending the avoidance command.  For instance, if the attitude system is malfunctioning, then the avoidance command will be inhibited (Requirement #1).  In addition, if the system detects that the airplane is flying toward the ground for normal operations (i.e. the airplane is landing), GCAS will also inhibit the avoidance manuever (Requirement #2).  These aren't the only cases when GCAS must be inhibited, these are based on a detailed analysis of the airplane failure modes and operations and should usually be a result of a systematic process such as SAE 4754 and SAE 4761 or the JARUS SORA process.</p>"},{"location":"gcas_details.html#last-man-standing","title":"Last Man Standing","text":"<p>If there is more than one potential avoidance trajectory, the system will wait until all trajectories are exhausted before issuing an avoidance command. Additionally, this \"last man standing\" manuever will be commanded. This is accomplished by duplicating the process of predicting a trajectory, querying the terrain database, adding a TCB, and checking for error conditions for each of the possible avoidance trajectories.  Then in the event that the system decides a collision is likely for a specific trajectory, a Need to Avoid flag for that trajectory will be set.  The system then waits until all the NTA flags are set and commands the manuever of the last one to be set.  If there is a tie between which is the last to be set, a pre-defined priority is used,usually prioritizing the level pull, then a left turn over the right.  The following is a simple pseudocode for the Need to Avoid function.</p>"},{"location":"gcas_details.html#pseudocode-for-dna","title":"Pseudocode for DNA","text":"<pre><code>  bool NeedToAvoid(TPA_trajectory,\n              TPA_point,\n              terrainClearanceBuffer)\n  {\n    if(TPA_trajectory - terrain_elevation &lt; terrainClearanceBuffer)\n    {\n      // we need to avoid \n      // potentially fatal scenario\n      return true;\n    }\n    else\n    {\n      // no need to avoid this scenario\n      // airplane is above the threshold\n      return false;\n    }\n  }\n</code></pre>"},{"location":"gcas_introduction.html","title":"The Ground Collision Avoidance System","text":""},{"location":"gcas_introduction.html#why-ground-collision-avoidance-systems-are-needed","title":"Why Ground Collision Avoidance Systems Are Needed","text":"<p>Ground/Terrain Collision Avoidance Systems (sometimes called \"GCAS\") are safety systems whose sole function is to keep perfectly good aircraft from colliding with the ground. Turns out this is a big problem in all of aviation and especially for small airplanes. In the military, accidents of this type are called \"controlled flight into terrain\" or CFIT, and CFIT is the #1 cause of fatal aircraft accidents for the military.  In civilian aviation, the definition of CFIT is a little different; however, if we were to apply the military definition, it would also be the #1 cause of fatal accidents.  (See this paper for more information on CFIT and the differences in definition.)   Factors such as spatial disorientation, G-induced loss of consciousness, distraction, or limited visibility cause CFIT, and unfortunately CFIT is oftentimes fatal.</p> <p>We have had solid data for many years about the risks of CFIT and so, as you would expect, there have been many proposed solutions to the problem.  One of the most obvious solutions is to simply warn a pilot that a ground collision is likely.  These types of systems are called \"manual\" GCAS and some examples are the Terrain Awareness and Warning Systems (TAWS) and Predictive Ground Collision Avoidance System (PGCAS). In addition, many new GPS based map systems also notify the pilot if terrain ahead is above the current airplane altitude.  These manual systems have certainly saved many lives, however, they don't work when a pilot is disoriented, distracted, or unable to control the airplane and so, CFIT continues to cause aviation fatalities.  For all these other CFIT causes, only an automatic GCAS (Auto GCAS) will be able to prevent the fatalities.  This is why we are working to build open source versions of Auto GCAS in this repository.</p> <p> Wreckage of a fatal crash in Lake City, Florida.  Accidents like these are all too common in general aviation</p>"},{"location":"gcas_introduction.html#top-level-gcas-requirements","title":"Top Level GCAS Requirements","text":"<p>When someone starts off on the task of designing any rather complex software system, one of the first tasks is to define requirements.  Requirements are a list of statements that define how the software is required to act, and the features its required to have.  Requirements are generally broken down into top level requirements, and lower level requirements.  All of the code and all of the tests are based on this list and so requirements have to be clear, not contradictory, and complete. </p> <p>For Auto GCAS, the most important top level requirement is that Auto GCAS doesn't make safety worse.  Usually called \"Do No Harm\" this requirement seems rather obvious, but in a GCAS design it can make big differences.  For instance, prioritizing Do No Harm might mean that the system turns itself off instead of making a decision that it is not sure will improve safety.  For example, if the system can't verify that the attitude coming from the orientation sensors is correct, the system will inhibit itself.  This way the Auto GCAS doesn't erroneously pull the aircraft into the ground or something.  That would cause a bad day to be even worse!</p> <p>The second top level requirement is to inhibit itself if there isn't an imminent collision.  Often called \"Do Not Interfere,\" this requirement prioritizes the mission of the pilot or airplane over being as safe as conceivably possible. This may seem counter intuitive at first, but research has shown that if any automatic system is constantly interfering with normal piloting, then the pilots or operators will turn it off and it will provide no benefit.  Plus, if the pilots are constantly getting \"nuisance flyups,\" it could actually cause a the pilot to become distracted or disoriented, contributing to safety concerns.</p> <p>The third and final top level requirement is to \"Avoid Ground Collisions\".  This requirement is the lowest priority of the three top-level requirements. That means that if the system can't be sure it is helping to make things safer or it can't be sure that there is an actual dangerous situation, then the system will instead do nothing.  Luckily, the system can still provide excellent protection even with these hierarchical priorities.  In fact, the F-16 Auto GCAS, which also uses these priorities, has many documented Auto GCAS saves, and hasn't had a single CFIT accident since Auto GCAS was installed over 8 years ago!</p> <p> This United States Air Force F-16 is one of many F-16s with an operational Auto GCAS.  Auto GCAS has reduced F-16 CFIT fatality rates to zero since it's installation.</p>"},{"location":"gcas_introduction.html#the-top-level-gcas-design","title":"The Top Level GCAS Design","text":"<p>Now that we have discussed the top-level requirements, let's discuss the top-level design.  At that level, GCAS consists of two major parts: a Ground Collision Monitor and an Avoidance Controller. The main job of the Monitor is to compute the future state of the airplane and determine whether there is a high potential for a ground collision.  If the Monitor calculates that a ground collision is highly likely (and thus the flyup won't be a nuisance), it commands the Controller to fly a manuever that will avoid that collision.  The Monitor itself can also be broken down into two parts.  The first does the Trajectory Prediction and the second compares that trajectory to the elevations of the ground.  This second part, the Terrain Manager scans an on-board database of ground/terrain elevations and finds the terrain at the same latitude and longitude as the computed trajectory.  </p> <p>The GCAS Controller, on the other hand, is in charge of actually taking control and flying the airplane away from the ground. For example, the controller for GCAS on the Air Force fighter airplanes are all autopilots which roll the airplane to wings level and pull away from the ground. This single maneuver is selected for the air force fighters because these airplanes have large jet engines that produce a large amount of thrust compared to the weight of the airplane. This means that these airplanes are able to climb really well. Since there is only one possible maneuver, when the GCAS monitor predicts that a ground collision is about to happen, the GCAS controller simply performs this wings level climbing maneuver. </p> <p> The controller trajectory of a single wings level pull-up manuever</p> <p>Unfortunately, larger transport airplanes and civilian airplanes are not able to climb as well as fighter type airplanes. But, because they are generally going quite a bit slower than fighter type airplanes, they can usually turn really fast. So for these slower, lower power airplanes, the GCAS Controllers perform at least 3 maneuvers: a wings level climb, a right turning climb, and a left turning climb.  In this case, the GCAS monitor is tasked with not only needs to figure out if a ground collision is about to happen but also needs to tell the controller which maneuver it should perform. Don't worry though, figuring out which maneuver to perform is not any more complicated than figuring out if a ground collision is about to happen in the first place... It just takes a little more processing time.</p>"},{"location":"intro_to_gcas.html","title":"openGCAS - Introduction","text":"<p>Revised Jan 18, 2023</p>"},{"location":"intro_to_gcas.html#abstract","title":"Abstract","text":"<p>This document conveys the history, motivation, and strategies into designing ground collision avoidance systems. It also highlights the high-level architecture for a Ground Collision Avoidance System (GCAS) for use by General Aviation airplanes using openGCAS.</p>"},{"location":"intro_to_gcas.html#considerations-for-increasing-safety-with-digital-safety-systems","title":"Considerations for Increasing Safety with Digital Safety Systems","text":"<p>This brings up the question, how do we intervene in the case of an \"imminent crash\"? One way that has gotten quite a bit of recent attention, is to use an use computers to calculate when a crash is likely and use an airplane autopilot to maneuver in a way which keeps the aircraft from actually crashing. Another relatively popular way, is to let the pilot know that there is an imminent crash, and either depend on the pilot to figure out how to avoid the crash, or better yet, actually tell him the steps to take to avoid the crash. In general, both of these approaches fall under the general category of so called \"safety systems\" (or as I like to call them \"digital safety systems\" to distinguish them from other safety apparatuses).</p> <p> This US Air Force F-16 was one of the first to have a fully automatic digital safety system</p> <p>All digital safety systems work in more or less the same way. First, they get certain information about where the aircraft currently is and how it is currently flying. Then they use this data to perform computations that generate a prediction of whether or not the aircraft is in immediate danger. If the system predicts that the aircraft is in immediate danger, then they either command the autopilot to perform an \"avoidance manuver\" (which makes the system an \"automatic safety system\") or they tell the pilot to perform the avoidance maneuver (which makes this type of system a \"manual safety system\"). It turns out, unsurprisingly perhaps, that automatic safety systems are actually quite a bit more effective than manual systems at increasing safety. It also turns out that they are generally easier to design so that they don't affect normal airplane operations. So, I am most interested in automatic safety systems and would like to focus on those from here on out. This means that in our discussion we can assume we are discussing automatic type systems unless we specifically say that what we are discussing is a manual one.</p>"},{"location":"intro_to_gcas.html#airplane-certification-and-its-effects-on-digital-safety-system-design","title":"Airplane Certification and its Effects on Digital Safety System Design","text":"<p>Since we are talking about automatic safety systems, then we are talking about a system which will take control of an airplane. It turns out that it doesn't make a lot of sense to ask the pilot whether a safety system can take control, because the factors that have led to the condition which is causing the danger, are probably still affecting the pilot. So, if the pilot is disoriented or even temporarily incapacitated, asking them to approve an automatic maneuver that might end up saving their lives is probably not the best idea. Another reason is that if it is an actual emergency situation, and the pilot is aware of it, they are probably really busy dealing with the situation and adding one more button to push or one more decision to make will be counter productive. So, we must adhere to the design principle that we can take control of the aircraft without the pilots immediate permission. This causes all sorts of headaches for the Federal Aviation Administration (FAA), which is in charge of certifying that an aircraft and airspace is safe as possible.  The problem is that the current air transportation system is built around the concept that the pilot-in-command has the ultimate responsibility for safety for the aircraft they are flying.  So, if we let a computerized system fly the airplane without the pilot's explicit permission, then some of this authority is taken away.</p> <p>Let me be clear, a digital safety system would not be the only automatic system on an aircraft.  Modern aircraft have all kinds of automatic systems to check the avionics, to control the on board enviornment, and even to control the engines.  These systems all must go through a process which evaluates what effect a failure would have on the airplane.  Would it be catestrophic?  Would it be annoying?  What's the worst case outcome?  For those systems which can cause a catestrophic outcome, the FAA requires the highest level of ``design assurance'' (Design Assurance Level A (DAL A)).  DAL A systems must be checked with excruciating detail in order to be approved for flight, and because the amount of work required to check a system goes up exponentially with the with the system complexity, the systems should be made as simple as possible. </p> <p></p> <p>For a digital safety system, the way this is done is to restrict each safety system to only one piloting function at a time. There are many things that a pilot must do to make sure that the aircraft does not crash. They must simultaneously make sure they don't crash into another aircraft, make sure they don't crash into the ground, make sure they don't stall, they have to avoid really bad weather, etc. In addition, they have to do all of this safety planning and decision making while doing the normal and useful job of flying. We call each of these safety planning and decision tasks \"safety functions\". Each safety function is concerned with only one type of threat to the aircraft. So, if we are trying to make each safety system as simple as possible, then we want to restrict each safety system to only be concerned with one safety function.  For the case of the Ground Collision Avoidance System (GCAS), the piloting function is soley to avoid hitting the ground.</p>"},{"location":"intro_to_gcas.html#the-ground-collision-avoidance-system","title":"The Ground Collision Avoidance System","text":""},{"location":"intro_to_gcas.html#why-ground-collision-is-a-problem","title":"Why ground collision is a problem","text":"<p>Ground Collision Avoidance Systems (sometimes called \"GCAS\") are safety systems concerned with keeping perfectly good aircraft from colliding with the ground. Turns out this is a big problem in all of aviation and especially for small airplanes. In fact in military fighter type airplanes, colliding with the ground when there is absolutely nothing wrong with the airplane is the #1 cause of fatal aircraft accidents. This is because military fighter airplanes are highly dynamic vehicles that are capable of doing things that humans were just not designed to do. One example is \"pulling G's.\" Pulling G's refers to the ability of the airplane to change direction very rapidly. When the airplane is changing direction, all of the things inside the airplane (including the pilot) want to keep going in a straight line. However, since the human is strapped to the airplane, the airplane applies a force to the human so that the human changes direction too. For many fighter type airplanes, this force can be up to 9 times the normal force of gravity. We call the acceleration associated with this change in motion \"pulling 9 G's\", or said another way, 9 times the force of gravity (G stands for gravity) is being experienced by the pilot.</p> <p></p> <p>Now, 9 G's is a lot. A 200lb pilot pulling 9 G's would feel like they weighed 1800lbs! In fact, even the blood in the pilots body feels the effect of all the G's, so much so, that the heart has a hard time pumping the blood up to the pilots brain. The blood then begins to collect in the pilots legs and when the brain hasn't had enough blood for only a couple of seconds, the pilot can loose consciousness (or go to sleep). When this happens there is no one flying the plane and oftentimes the plane begins descending really quickly to the ground and before the pilot wakes up, it is too late!</p> <p>We call this phenomenon, G-induced loss of consciousness (or GLOC), and quite a few military pilots have unfortunately died this way. So, in 2014, the United States Air Force put an Automatic GCAS system onto all of their F-16 fighter airplanes in order to save them from this type of accident, and I am very happy to report that it has worked very well! Since 2014 there hasn't been any of these types of accidents in the F-16 and many pilots have instead been saved. One dramatic example was captured on video and released by the Air Force to the public. You can watch the dramatic video of the save here. Since 2014, the Air Force has also put Auto GCAS on the F-22 and F-35 aircraft in a bold move to save pilots and airplanes.</p> <p>So what about for small civilian airplanes? While civilian pilots usually don't have to worry about GLOC, there are many other scenarios that affect civilian pilots and cause them to collide with the ground. One particularly common cause is that the pilot just doesn't know where the ground is. Oftentimes this is caused by a pilot flying into clouds or fog or maybe even just flying at night over the ocean to where the pilot just can't see the ground (I guess we should clarify for the purposes of this discussion, the ocean is also considered the ground in this case). Other times, the pilot gets distracted or disoriented to the point that they don't understand how close they are to the ground until it's too late. </p> <p>Accidents like these unfortunately kill many pilots a year in civilian aircraft. Unlike for military fighters, to this point there are no GCAS systems on small civilian aircraft. This is the main motivation for this book and this project, to bring awareness to the problem and to build GCAS systems in order to save civilian airplane pilots and passengers. So, how does GCAS work?</p>"},{"location":"intro_to_gcas.html#how-gcas-works","title":"How GCAS Works","text":"<p>We have already discussed the our priorities in making safer airplanes, we have discussed the run-time assurance approach of using simple safety systems which perform only one safety function, and we have discussed that these safety systems contain a monitor and a controller. So, the good news is that you already know quite a bit about how a GCAS works just from the things that we have already discussed! That being said I also think it's important to get into the nitty gritty details, so that we can understand how the things we already learned affect the design of a GCAS.</p>"},{"location":"intro_to_gcas.html#the-gcas-controller","title":"The GCAS Controller","text":"<p>As we have mentioned, GCAS contains two major parts, the monitor and the controller. I want to begin by describing the controller because much of the monitor has to be based on how the controller acts and there are a couple of options based on which type of airplane the GCAS is designed for. For example, the controller for GCAS on the Air Force fighter type airplanes are all autopilots which roll the airplane upright and pull away from the ground. After the airplane is upright, its wings are parallel with the ground, and the nose is pointing up away from the ground the airplane begins a climbing maneuver in order to clear any mountains or ground in front of it. This single maneuver is selected for the air force fighters because these airplanes have large jet engines that produce a large amount of thrust compared to the weight of the airplane. This means that these airplanes are able to climb really well Since there is only one possible maneuver, when the GCAS monitor predicts that a ground collision is about to happen, the GCAS controller simply performs this wings level climbing maneuver. </p> <p></p> <p>Unfortunately, larger transport airplanes and civilian airplanes are not able to climb as well as fighter type airplanes. However, because they are generally going quite a bit slower than fighter type airplanes they can usually turn really fast. For these slower, lower power airplanes, the GCAS controllers often are able to perform between 3 and 5 maneuvers. They can still perform a wings level climb, but they can also perform turning maneuvers which take advantage of the excellent turning ability of these airplanes. Generally, at least 3 maneuvers: a wings level climb, a right turning climb, and a left turning climb are available as options for use by the GCAS controller. In this case, the GCAS monitor not only needs to figure out if a ground collision is about to happen but also needs to tell the controller which maneuver it should perform. Don't worry though, figuring out which maneuver to perform is not any more complicated than figuring out if a ground collision is about to happen in the first place... It just takes a little more processing time.</p>"},{"location":"intro_to_gcas.html#the-gcas-monitor","title":"The GCAS Monitor","text":"<p>The GCAS monitor is built around a prediction of the aircraft trajectory. The predicted trajectory is step by step projection into the future of where the airplane will be and how it will be oriented. One of the most surprising things that people learn about this predicted trajectory is that it is not a prediction of how the airplane will fly if it continues flying as it currently is. Instead, the computed trajectory is a prediction of how the airplane will fly if the GCAS controller takes over. In this way the GCAS monitor can accurately say whether the GCAS controller can avoid the ground and if so, by how much.</p> <p>Now, in the real world we cannot predict things with absolute certainly. For instance in aviation, a wind gust can cause the airplane to temporarily go in random ways and this we cannot predict. In fact, in the real world we can't even tell exactly where we are at any given time, or exactly how fast we are going so that any future prediction will be off just based on the erroneous starting point. This makes predicting the trajectory difficult and imprecise. That means we have to have a buffer so that any errors in our predictions don't end up causing the system to fail. So, if the predicted trajectory comes within a distance of the ground equal to or less than this buffer then the GCAS monitor will predict that a ground collision is about to happen. We call this buffer the \"Terrain Clearance Buffer\" or TCB. If the GCAS controller only has one maneuver, then if the predicted trajectory gets closer to the ground than the TCB then the GCAS monitor asks the GCAS controller to perform that maneuver. In the case of multiple maneuvers, the trajectory for each of the maneuvers is computed and compared to the ground. In this case, all of the maneuvers have to be within the terrain clearance buffer in order for the monitor to ask the GCAS controller to perform its maneuver. But which does it ask the controller to perform? Oftentimes, the monitor will ask the controller to fly the maneuver whose prediction entered the TCB last. Other options are that the monitor could ask the controller to fly the maneuver that has the greatest separation from the terrain.</p> <p>In order for the monitor to calculate how far the predicted trajectory is away from the ground, the monitor needs to know where the ground is. For this the monitor uses very large databases of ground elevations which cover the majority of the earth. When the trajectory is predicted, the latitude and longitude of the points along the trajectory are calculated. These latitudes and longitudes are then fed into a ground elevation database and the ground altitude underneath that point in the trajectory is returned. The predicted altitude of the trajectory point is then compared to the ground elevation and if the difference between the two is less than the TCB, the monitor should determine that a ground collision along that maneuver should be avoided.</p>"},{"location":"intro_to_gcas.html#ground-collision-avoidance-in-an-rta-architecture","title":"Ground Collision Avoidance in an RTA architecture","text":"<p>This section highlights the high-level architecture for the Real-Time Assurance (RTA) for openGCAS. The high level RTA figure contains a generic diagram for any RTA control system. The RTA is responsible for selecting between a number of different control systems in real time. For example, the diagram contains one primary control system called the Complex Function. The Complex Function is either human control or autopilot. Running in parallel to the Complex Function are the Recovery Control Functions. Their sole purpose is to provide an escape route in a potentially fatal scenario. In addition, a monitor is required to select between the different control systems in an imminent fatal event. The selector is known as the Safety Monitor.</p> <p>Now, the generic diagram described in the previous section will be translated into a specific implementation for openGCAS. At any given moment, both the GCAS Monitor and the GCAS Controller are evaluating the scenario at present, planning an escape to a fatal event should one arise. The GCAS Monitor's role is a high level evaluation of the situation as a whole, performing calculations to Determine Need to Avoid (DNA.) The GCAS Monitor's evaluation of the situation is sent to the \"Decider\", where a switch can be toggled between normal (human or autopilot) control and GCAS control.</p> <p></p>"},{"location":"intro_to_gcas.html#opengcas-architecture","title":"openGCAS Architecture","text":"<p>The state of the airplane will be given by sensor data, which includes position, velocity, altitude, and so on. This state information feeds the Trajectory Prediction Algorithm (TPA) with necessary data. Meanwhile, the surroundings and TPA provide the Map Manager with information about the environment. The output of  these two systems will be sent to a comparator, where Determine Need to Avoid (DNA) will be calculated. DNA is a Boolean value based on the output of this comparator. The airplane's autopilot control coupler will switch between GCAS and normal (human or autopilot control) when necessary. </p> <p></p>"},{"location":"intro_to_gcas.html#tpa","title":"TPA","text":"<p>The purpose of the Trajectory Prediction Algorithm (TPA) calculate a trajectory in which an obstacle is avoided. The figure below shows a lateral view of the Trajectory Prediction Algorithm's calculated trajectory. The TPA's calculated path is represented by the dotted line.</p> <p></p>"},{"location":"intro_to_gcas.html#collision-avoidance-maneuvers","title":"Collision Avoidance Maneuvers","text":"<p>The purpose of TPA figure is twofold: visualize the TPA's three potential maneuvers, and to introduce the concepts of TPA points. Beginning with the TPA's three potential maneuvers, it should be noted that the figure shows the same scenario as the collision avoidance manuever shown below, but from an overhead view. There are three potential maneuvers that the TPA will consider:</p> <ul> <li>Pull up, bank left</li> <li>Pull up, wings level</li> <li>Pull up, bank right</li> </ul> <p>The process by which a maneuver is selected will be defined in the section Last Man Standing.</p>"},{"location":"intro_to_gcas.html#tpa-points","title":"TPA Points","text":"<p>This section documents the process by which a TPA point is defined. To begin, a circular surface area of an arbitrary radius will be defined. This finite domain will be cross-referenced with terrain data. The largest data point in the terrain data (which happens to be the highest elevation) will be defined as the TPA Point for that particular location. This coarsening, discretization of terrain data is done to remove any uncertainties in the terrain data. By selecting the highest point in a given area, the system is assuming the worst case scenario at all times. This adds to the safety cushion threshold of the system, and thus, makes it more likely to save lives.</p>"},{"location":"intro_to_gcas.html#decider","title":"Decider","text":"<p>This section describes the process by which the GCAS Monitor flags a potentially fatal scenario as TRUE, taking control of the airplane from the Complex Function (human or autopilot.)</p> <p></p>"},{"location":"intro_to_gcas.html#defining-the-takeover-threshold","title":"Defining the Takeover Threshold","text":"<p>The figure showing the decider depicts a fatal scenario where the GCAS Monitor will flag the scenario as TRUE and allow the GCAS Controller to take over the airplane. There are few critical variables in this scenario to be understood:</p> <ul> <li>Closest Point of Approach (CPA) - The shortest distance between the TPA's trajectory and the terrain data.</li> <li>Terrain Clearance Buffer (TCB) - A predefined, minimum altitude threshold between the airplane and the terrain.</li> </ul> <p>You can observe the CPA in the image, which is the distance between the dotted line (TPA maneuver trajectory) and the TPA Points in red. The TCB can be seen in blue. Notice that the trajectory clears all but one of the Terrain Clearance Buffer instances. In this example, the maneuver being evaluated will flag NTA (Need To Avoid) as TRUE because it surpasses the minimum threshold for distance.</p>"},{"location":"intro_to_gcas.html#last-man-standing","title":"Last Man Standing","text":"<p>Keeping in mind that three potential maneuvers are being evaluated at all times, here is where the concept of \"last man standing\" becomes a pivotal element in the system. By default, the Boolean value of NTA (Need To Avoid) of each controller is FALSE. In the event of a fatal scenario, each controller has a independent DNA (Determine Need to Avoid) function. As a fatal scenario begins to unfold, each controller's NTA will independently flag as TRUE if the defined threshold (TCB) is surpassed. The final controller's NTA to be flagged as TRUE will be used for the collision avoidance maneuver. This is done to decrease unnecessary nuisance in the system if an event does not need to be avoided.</p>"},{"location":"intro_to_gcas.html#pseudocode-for-dna","title":"Pseudocode for DNA","text":"<pre><code>  bool determineNeedToAvoid(TPA_trajectory,\n              TPA_point,\n              terrainClearanceBuffer)\n  {\n    if(TPA_trajectory - TPA_point &lt; terrainClearanceBuffer)\n    {\n      // we need to avoid \n      // potentially fatal scenario\n      return true;\n    }\n    else\n    {\n      // no need to avoid this scenario\n      // airplane is above the threshold\n      return false;\n    }\n  }\n</code></pre>"},{"location":"intro_to_gcas.html#gcas-controller","title":"GCAS Controller","text":"<p>The GCAS Controller figure above shows the real-time controller for each potential scenario running simultaneously. To reiterate, each scenario is being evaluated individually. The last controller to be flagged NTA will be the \"Last Man Standing.\" This particular controller will take control of the airplane and avoid the fatal event.</p>"},{"location":"intro_to_gcas.html#run-time-assurance-decision-architecture","title":"Run Time Assurance Decision Architecture","text":"<p>Now how do these functions interact with each other? What about times when there are conflicts between them? How do we prioritize safety functions? How is the normal useful piloting prioritized? One particular approach to answering these questions that has recently grown quite popular is the \"Run-time assurance\" approach which will be discussed in the next section.</p> <p>Before we get into the technical details of the run-time assurance approach, let's discuss the history and ways of thinking that led to its development. First of all, run-time assurance, as a concept, has a relatively long history and has went through several name changes along the way. The very basic idea was generated to solve a problem that is understood to all people who have ever coded anything before. The problem is that software fails. What makes that problem a super critical one to address is that sometimes software failures result in a risk of injury or even dying. The hard thing about software is that it doesn't fail like other \"hard\" systems. Everything can work flawlessly 99 times out of a 100 and then on the 100th time a special combination of inputs can drive the software to a state which it does something extreme. So, no matter how many tests you run on the software and how many times it passes, you can never be sure that the software is infallible. </p> <p>Back at the early days of NASA, rockets were controlled using computerized control systems driven by software. The NASA engineers working on these rocket control systems knew that a bug in the software could cause the rocket to go out of control very quickly and possibly kill quite a few people. So, they decided to build two completely different control systems, put them both on the rocket, and switch from the main controller to a backup controller if the rocket started doing something unexpected. They figured that since the controllers were different, they wouldn't fail at exactly the same point, and so if one failed the other would very very likely work properly. This approach was used at NASA for many decades actually, and not just on rockets but also on airplanes in research control systems. </p> <p>Then around 1998 or so, a couple of researchers at the University of Illinois used some rather brilliant analysis to show that a simpler backup system actually provided better immunity to errors than a more complicated one. They termed this approach the \"Simplex\" architecture and it was based on a few core (and also very realistic assumptions). The first assumption is that the number of bugs in a piece of software scales with software complexity. This means that the more complex a piece a software the more bugs it will contain (at least initially). The second assumption is that the rate at which bugs can be eliminated from a piece of software is initially high, but then decreases towards zero as the bugs get harder and harder to track down and understand. This has the effect that it takes an ever increasing amount of effort to find and correct a bug as the project becomes more mature. These two assumptions, plus the fact that there is always a limited amount of resources on any project, means that a structure with a simple backup system will actually be more reliable than one with a complicated backup, given an equal amount of effort between the two approaches. </p> <p></p> <p>The Simplex architecture approach changed thinking about software reliability and software redundancy. Then as the approach was adapted to the complex world of aviation, an extension was needed. This came in the form of the run-time assurance approach, which allows for multiple simple backup controllers each with a safety function they are monitoring. The name run-time assurance comes from the idea that in aviation, most software is verified before it is ever put on an airplane. This is the extensive checking that we discussed that the FAA require. But, using the concepts developed in the Simplex papers, checking the system at \"run-time\" and assuring aircraft safety with backup controllers may be a better way moving forward.</p>"},{"location":"intro_to_gcas.html#the-run-time-assurance-approach","title":"The Run-Time Assurance Approach","text":"<p>The run-time assurance (called RTA from here on) approach then basically contains two critical parts. The first does the checking and it is called a run-time monitor. These monitors check the state of the aircraft, perform some calculations on that state, and then determine if the underlying system has a bug (or has done something that will lead to a safety issue). The second part is a backup controller. This backup controller brings the aircraft state back into a safe place and only takes over when the monitor calculates that something is wrong.</p> <p></p> <p>Conceptually, RTA monitors and backup controllers can be composed of any combination of computer and/or humans. For instance, the RTA monitor can be a computer program that is constantly evaluating the aircraft location to make sure it is not in a dangerous place. If it is, the RTA can tell the pilot that he needs to fly somewhere else. When posed in this form, the RTA concept is not all that different from the myriad of warnings and system checkers that one would find on many modern aircraft today. However, for the automatic safety systems that we are concerned with in this paper, both the monitoring and the controlling is done by a computer. In this case, we like to group these two components together and call it a system, and remember that each system will be responsible for only one safety function. The most mature of these safety systems is the Ground Collision Avoidance System, or GCAS.</p> <p>[^1]: In flight entertainment systems run on separate power systems from other more critical systems so that a failure in the in-flight entertainment system wouldn't cause a failure of a more critical one.</p>"},{"location":"priorities.html","title":"Priorities for the Laboratory","text":""},{"location":"priorities.html#priority-1-democratizing-aviation","title":"Priority #1 - Democratizing Aviation","text":"<p>First things first, we believe in the principle of Aviation for All! People have been dreaming about flying since before the dawn of history, and we have only been able to accomplish this with any reasonable expectation of not immediately dying for around 100 years or so.  Additionally, airplanes are useful, fast, and a lot of fun.  We don't want to get rid of airplanes or airplane pilots, in fact quite the contrary.  Instead, we want to enable everyone to fly, and not just in the cabin of a large airliner with a small window and no control, but to slip the surly bonds of earth and really aviate!  So, that's the number one priority here, bar none, that airplanes should be made better so that they can fly, be a useful and safe form of transportation, and be made available to everyone.  In short, to democratize aviation!</p>"},{"location":"priorities.html#priority-2-aviation-safety","title":"Priority #2 - Aviation Safety","text":"<p>In order to pull off the vision of priority #1, we need safer small airplanes. Now, there is always some non-zero risk in flying in any airplane. For large commercial airplanes, the risk is very very low. Travel in large commercial airplanes is one of the safest forms of mass travel ever devised by humans.  However, it's a different story for small airplanes. Small airplanes are actually way more dangerous, like 1000 times more dangerous (3 orders of magnitude) than large airplanes. Even when compared to traveling in a car, small airplanes are still more dangerous, but here only about 1 order of magnitude (10X) or so.  The following figure is a map of all the fatal accidents in US aviation since 2008 shown as a small red dot.  Now, there is alot of them, and the overwhelming majority of them (between 95 and 99%) are small aircraft. This is unacceptable and not going to work if we are going to realize the vision of aviation for all. But, that is the reason why we are here... to do something about that... to make small airplanes safer for all aviators, at all levels of flying prowess.  If we can do this for the aviators of today, it will be a major step forward for opening up the skies to the aviators of tomorrow.</p> <p> Map of US fatal airplane accidents from 2008 to the present</p> <p>High Flight</p> <p>BY JOHN GILLESPIE MAGEE JR.</p> <p>Oh! I have slipped the surly bonds of Earth And danced the skies on laughter-silvered wings; Sunward I've climbed, and joined the tumbling mirth of sun-split clouds,\u2014and done a hundred things You have not dreamed of\u2014wheeled and soared and swung High in the sunlit silence. Hov'ring there, I've chased the shouting wind along, and flung My eager craft through footless halls of air ....</p> <p>Up, up the long, delirious, burning blue I've topped the wind-swept heights with easy grace Where never lark nor ever eagle flew\u2014 And, while with silent lifting mind I've trod The high untrespassed sanctity of space, Put out my hand, and touched the face of God.</p>"},{"location":"raster_query_system.html","title":"Raster Query System","text":"<p>The Raster Query System is a singleton class containing interfaces pertaining the conversion of <code>llPoint</code> structs  (defined in <code>structs.h</code>) to indicies on a local raster. It accepts a reference to an <code>std::vector&lt;GDALRasterBand&gt;</code> named <code>rasterVec</code> containing the RasterBands for each file in <code>data/</code> as well as an <code>std::vector&lt;llPoint&gt;</code> named <code>llVec</code>. </p> <p><code>init()</code> creates the <code>std::vector&lt;GDALRasterBand&gt; rasterVec</code> vector.</p> <p><code>checkPoint()</code> ensures that each llPoint index in llVec is a possible value. If an impossible value is detected, it will pop it from the vector. This method is called in the initializer list of the RQS class to prevent any issues when copying the vector.</p> <p><code>discreteIndex()</code> creates a new <code>std::array&lt;int, 3&gt;</code> vector named <code>nPointInd</code> with the size of llVec that contains the index in rasterVec which the same-indexed point in llVec lives as the third index, and the i and j index on that raster as the first and second index.</p> <p>The first goal, before worrying about selections and selection interpolation density, is to ensure and test the indexability of each and every possible lat-long point.</p>"},{"location":"release_history.html","title":"openGCA - Release History","text":"<p>TODO</p>"},{"location":"release_notes.html","title":"openGCAS - Release Notes","text":""},{"location":"release_notes.html#1-version-999-todo","title":"1. Version 9.9.9 TODO","text":"<p>Release Date: dd.mm.2022</p>"},{"location":"release_notes.html#11-new-features","title":"1.1 New Features","text":"<ul> <li>TODO</li> </ul>"},{"location":"release_notes.html#14-applied-software","title":"1.4 Applied Software","text":"Software Version Remark Status Git 2.25.1 base version"},{"location":"release_notes.html#131-unix-specific-software","title":"1.3.1 Unix-specific Software","text":"Software Version Remark Status asdf v0.10.2-7e7a1fa base version (optional) cURL 7.68.0 base version dos2unix 7.4.0 base version GCC &amp; G++ 9.4.0 base version GNU Autoconf 2.69 base version GNU Automake 1.16.1 base version GNU make 4.2.1 base version htop 3.2.1 optional Ubuntu 20.04.4 LTS base version Vim 8.1.3741 base version (optional) Wget 1.20.3"},{"location":"release_notes.html#132-windows-specific-software","title":"1.3.2 Windows-specific Software","text":"Software Version Remark Status Grep for Windows 2.5.4 base version Make for Windows 3.81 base version sed for Windows 4.2.1 base version"}]}